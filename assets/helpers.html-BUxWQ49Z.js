import{_ as o,c as p,b as n,d as s,w as t,a as i,r,o as c,e as l}from"./app-e03MkAss.js";const d={},u={class:"table-of-contents"};function h(m,e){const a=r("router-link");return c(),p("div",null,[n("nav",u,[n("ul",null,[n("li",null,[s(a,{to:"#introduction"},{default:t(()=>e[0]||(e[0]=[l("Introduction")])),_:1})]),n("li",null,[s(a,{to:"#system-helpers"},{default:t(()=>e[1]||(e[1]=[l("System Helpers")])),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#app"},{default:t(()=>e[2]||(e[2]=[l("app()")])),_:1})]),n("li",null,[s(a,{to:"#env"},{default:t(()=>e[3]||(e[3]=[l("env()")])),_:1})])])])])]),e[4]||(e[4]=i(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>Helper functions in Daravel is just like it is in other back-end frameworks, which are simply functions one can call in any context.</p><p>The expected location for your own custom helper files are in the <code>app/helpers</code> directory.</p><h2 id="system-helpers" tabindex="-1"><a class="header-anchor" href="#system-helpers"><span>System Helpers</span></a></h2><p>There are helper functions provided by Daravel that can help you achieve certain goals like reading config values, throwing events, etc. though if you look at the implementation of these functions, you&#39;ll find that most of them are wrappers around functions provided by the <code>Core</code> instance which is the top level logical representation of a Daravel application.</p><div class="hint-container tip"><p class="hint-container-title">Note</p><p>The system helpers are located in the <code>core</code> folder in a single <code>helpers.dart</code> file.</p></div><p>The following section talks about these helpers.</p><h3 id="app" tabindex="-1"><a class="header-anchor" href="#app"><span>app()</span></a></h3><p>The <code>app()</code> helper enables you get access to the <code>core</code> instance of the Daravel application, which gives you access to certain system functions.</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> app <span class="token operator">=</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">final</span> <span class="token class-name">String</span> databasePort <span class="token operator">=</span> app<span class="token punctuation">.</span>env<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;DB_PORT&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="env" tabindex="-1"><a class="header-anchor" href="#env"><span>env()</span></a></h3><p>The <code>env()</code> function helps you read values in your <code>.env</code> file and allows you specify a return value in case the value isn&#39;t sent in your environment. It optionally allows you specify the type to cast the returned value to.</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">final</span> <span class="token class-name">String</span> callBackUrl <span class="token operator">=</span> env<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;CALLBACK_URL&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;http://localhost&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,13))])}const k=o(d,[["render",h],["__file","helpers.html.vue"]]),f=JSON.parse('{"path":"/general/helpers.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"System Helpers","slug":"system-helpers","link":"#system-helpers","children":[{"level":3,"title":"app()","slug":"app","link":"#app","children":[]},{"level":3,"title":"env()","slug":"env","link":"#env","children":[]}]}],"git":{"updatedTime":1732249257000,"contributors":[{"name":"The Full-Stack Jonin","email":"francis94c@gmail.com","commits":1}]},"filePathRelative":"general/helpers.md"}');export{k as comp,f as data};
