import{_ as l,c as o,b as a,d as e,w as t,a as p,r as c,o as r,e as i}from"./app-e03MkAss.js";const d={},u={class:"table-of-contents"};function g(f,n){const s=c("router-link");return r(),o("div",null,[a("nav",u,[a("ul",null,[a("li",null,[e(s,{to:"#introduction"},{default:t(()=>n[0]||(n[0]=[i("Introduction")])),_:1})]),a("li",null,[e(s,{to:"#create-a-config-file"},{default:t(()=>n[1]||(n[1]=[i("Create a Config File")])),_:1})]),a("li",null,[e(s,{to:"#config-file-anatomy"},{default:t(()=>n[2]||(n[2]=[i("Config File Anatomy")])),_:1})]),a("li",null,[e(s,{to:"#usage"},{default:t(()=>n[3]||(n[3]=[i("Usage")])),_:1})]),a("li",null,[e(s,{to:"#env-files"},{default:t(()=>n[4]||(n[4]=[i("Env Files")])),_:1})])])]),n[5]||(n[5]=p(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>Config files are one of the back-bones of your application as they can be used to customize how you application behaves or interacts with other applications or services.</p><p>Config files are located in the <code>config</code> directory of your project.</p><div class="hint-container tip"><p class="hint-container-title">Note</p><p>For every change ypu make to any config file, you need to run <code>dartisan generate</code> to re-generate the config map for your application, thereby making your changes visible to the application.</p></div><h2 id="create-a-config-file" tabindex="-1"><a class="header-anchor" href="#create-a-config-file"><span>Create a Config File</span></a></h2><p>To create a config file, use the command below:</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">dartisan make:config <span class="token operator">&lt;</span>config-name<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre></div><p>The above command creates <code>config-name</code> in the <code>config</code> folder.</p><div class="hint-container tip"><p class="hint-container-title">Note</p><p><code>&lt;config-name&gt;</code> is created as a file in <code>{$lowercase}.dart</code> and the class name in file is created in <code>ucfirst</code> case.</p></div><h2 id="config-file-anatomy" tabindex="-1"><a class="header-anchor" href="#config-file-anatomy"><span>Config File Anatomy</span></a></h2><p>A config class named <code>payment.dart</code> for instance will likely have the contents below</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:daravel_core/annotations/config.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token metadata function">@Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Payment</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">String</span> gateway <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;stripe&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  int tokenTTL <span class="token operator">=</span> <span class="token number">1800</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  int minimumDeposit <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Other config fields</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Note</p><p>Every config file has the <code>@Config</code> annotation at the top of the class. without it, the code generator will not be able to find the config file and generate it&#39;s map.</p></div><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><p>To get a config value, you can use the <code>config()</code> helper function like below to get the <code>tokenTTL</code> value in the example config file above:</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line">int tokenTTL <span class="token operator">=</span> config<span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;payment.tokenTTL&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can also specify a default value of the config field as the second argument of the <code>config</code> function in case the config value isn&#39;t set.</p><h2 id="env-files" tabindex="-1"><a class="header-anchor" href="#env-files"><span>Env Files</span></a></h2><p>Daravel supports the use of .env files and can be used together with your configuration files, below is a slight modification to two examples above.</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:daravel_core/annotations/config.dart&#39;</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token metadata function">@Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Payment</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">String</span> gateway <span class="token operator">=</span> env<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;PAYMENT_GATEWAY&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;stripe&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  int tokenTTL <span class="token operator">=</span> env<span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;TOKEN_TTL&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  int minimumDeposit <span class="token operator">=</span> env<span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;MINIMUM_DEPOSIT&#39;</span></span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Other config fields</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20))])}const v=l(d,[["render",g],["__file","configuration.html.vue"]]),k=JSON.parse('{"path":"/getting-started/configuration.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Create a Config File","slug":"create-a-config-file","link":"#create-a-config-file","children":[]},{"level":2,"title":"Config File Anatomy","slug":"config-file-anatomy","link":"#config-file-anatomy","children":[]},{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[]},{"level":2,"title":"Env Files","slug":"env-files","link":"#env-files","children":[]}],"git":{"updatedTime":1732249257000,"contributors":[{"name":"The Full-Stack Jonin","email":"francis94c@gmail.com","commits":1}]},"filePathRelative":"getting-started/configuration.md"}');export{v as comp,k as data};
